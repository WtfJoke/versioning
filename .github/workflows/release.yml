name: Release
on:
  issues:
    types:
      - labeled
jobs:
  create-release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ startsWith( github.event.label.name, 'release:' )}}
    steps:
      # - uses: actions/checkout@v2
      #   with:
      #     ref: develop

      - uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log("issue title", context.issue.title)
            console.log(JSON.stringify(context, null, 2))

            const workflows = await github.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            console.log(JSON.stringify(workflows, null, 2))
            const workflow = workflows.data.workflows.find(workflow => workflow.name === context.workflow)

            await github.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `![${context.workflow}](${workflow.badge_url})`
              })

      - uses: actions/github-script@0.9.0
        id: determine-bump-level
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const prefix = "release:"
                    
            if (context.payload.issue.labels.length > 1) {
              await github.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: 'Please add only one label'
              })
              throw new Error("More than one label provided")
            }

            const increment_level = context.payload.issue.labels.find(label => label.name.startsWith(prefix) )

            if (!increment_level) {
              await github.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: 'Please add a bump Version'
              })
              throw new Error("Missing bump Version")
            }

            const bump_level = increment_level.substr(prefix.length)
            console.log(`::set-output name=bump_level::${bump_level}`)

      - uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log("issue title", context.issue.title)

      - name: Setup Git
        run: |
          git clone "https://${GITHUB_ACTOR}:${{secrets.GH_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git" .
          git config user.email "octocat@github.com"
          git config user.name ${GITHUB_ACTOR}

      - name: Create release branch
        run: |
          git checkout -B release

      - name: Bump Version
        env:
          BUMP_LEVEL: ${{ steps.determine-bump-level.outputs.bump_level }}
        run: |
          yarn version --$BUMP_LEVEL
          git push origin release
          git push --tags
          echo ::set-env name=NEW_VERSION::$(cat package.json | jq -r .version)
      - name: Run E2E Tests
        run: |
          echo "RUNNING E2E TEST"
      - name: Start new release cycle
        run: |
          git checkout -B develop
          yarn version --no-git-tag-version --prerelease --preid "prerelease"
          git add .
          git commit -m "start new release cycle"
          git push origin develop

      - name: Wait for finish E2E Tests
        run: |
          echo "E2E FINISHED"

      - name: Merge release to master
        run: |
          git checkout master
          git merge release
          git push origin master

      - uses: actions/github-script@0.9.0
        name: Comment Issue
        env:
          NEW_VERSION: ${{ env.NEW_VERSION}}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            await github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸŽ‰ðŸŽ‰ Deployment has been successful dispatched version ${process.env.NEW_VERSION}! ðŸš€`
            })
            await github.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "closed"
            });
    #   # - name: Merge to master
    #   run: |
    #     cat .git/config
    #     git fetch origin
    #     git checkout master
    #     git merge --no-ff -m "Merge ${{github.event.issue.title}} into master" release
    #     git tag -a -m "add tag to master with ${{github.event.issue.title}}" "${{github.event.issue.title}}"
    # - name: Merge to develop
    #   run: |
    #     git checkout develop
    #     git merge --no-ff release
    # - name: Delete release Branch
    #   run: |
    #     git branch -d release
    # - name: Push new Branches
    #   run: |
    #     hub pull-request -m "Release ${{github.event.issue.title}} to master" -
    #     git push origin master
    #     git push origin develop
    #     git push --tags
    # const develop_pr = github.pulls.create({
    #         owner,
    #         repo,
    #         title: "Release ${{github.event.issue.title}} to develop",
    #         head: "release",
    #         base: "develop",
    #         });
    # const [master_pr_result, develop_pr_result] = await Promise.all([promise1, promise2, promise3])
    # console.log(develop_pr_result.id, develop_pr_result.name)
    # console.log(master_pr_result.id, master_pr_result.name)
